<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello-World</title>
      <link href="/2019/09/22/hello-world/"/>
      <url>/2019/09/22/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Why-Blog"><a href="#Why-Blog" class="headerlink" title="Why Blog"></a>Why Blog</h1><h2 id="对博客的理解"><a href="#对博客的理解" class="headerlink" title="对博客的理解"></a>对博客的理解</h2><p>我更想的是给大家一个思考的过程和结果体会，也是我自己的总结</p><blockquote><p>相比讲其他人已经定义好的是什么（除非是我定义的我才想写）</p></blockquote><blockquote><p>我更想讲为什么是这样，解决了什么问题、实现了什么需求、提升了什么、改变了什么</p></blockquote><blockquote><p>而具体又是因为什么才会是这样</p></blockquote><blockquote><p>我们还能根据既定规律（乃至创造规律）玩成：为什么可以是另外这样一种模样</p></blockquote><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>思考技术如何落地到业务，去解决需求、提升生产（效率）、改变人生乃至世界。</p><p>到目前为止已经写了<code class="article_number"></code>篇文章， 共<code class="site_word_count"></code>字。</p><p>本站访问人数：<code class="site_uv"></code>人次 ， 访问量：<code class="site_pv"></code>次</p><h2 id="博客平台"><a href="#博客平台" class="headerlink" title="博客平台"></a>博客平台</h2><p>这个博客通过 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 生成，部署在 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>，主题 <a href="https://github.com/yelog/hexo-theme-3-hexo">3-hexo</a> 已经在github上开源</p><p>主要功能：</p><ul><li>搜索支持文章标题、标签(#标签)、作者(@作者)</li><li>pad/手机等移动端适配</li><li>页面全局快捷键 <a href="http://yelog.org/2017/03/24/3-hexo-shortcuts/" target="_blank" rel="noopener">3-hexo快捷键说明</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习shell所得</title>
      <link href="/2019/09/21/%E5%AD%A6%E4%B9%A0shell%E6%89%80%E5%BE%97/"/>
      <url>/2019/09/21/%E5%AD%A6%E4%B9%A0shell%E6%89%80%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="学习Shell所得"><a href="#学习Shell所得" class="headerlink" title="学习Shell所得"></a>学习Shell所得</h1><h2 id="前言提要"><a href="#前言提要" class="headerlink" title="前言提要"></a>前言提要</h2><p>  前几周团队内部推荐我去帮忙公司一个平台CI流程脚本编写，我一开始以为是有人带我写的，后来发现并不是，要自己开头。那也没啥好说，这几天学习一下Shell并思考实现需求的流程，先放一张思维导图，这篇文章以这个导图为方向，结合我的实现流程思考写</p><p><img src="/img/shell.jpg" alt="Shell" title="Shell"></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>  Linux是为了抵制Unix类商业系统而兴起的开源操作系统，由大名鼎鼎的Linux编写及众多开源大佬维护，Shell终端是与Linux内核连接通信的前端，其中我分为三部分，shell、Linux内核、解释器;<br>  其实我了解到不止bash, dash, zsh三类shell，其中zsh较为全面强大，bash shell是比较通用，我讲述就以bash shell为主</p><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>  前面也介绍了shell终端是与linux通讯的程序，就是大家通常所说的文本命令行程序（CLI, Command Line Interface),大家也常叫DOS界面<br>  它一般具有以下几个功能</p><ul><li>图形功能<ul><li>字符集（显示什么、Linux内核通讯字符集）</li><li>控制码（键盘）</li><li>块模式图形</li><li>矢量图形</li><li>显示缓存</li><li>色彩</li></ul></li><li>terminfo数据库（终端与通讯信息）</li><li>Linux控制台<ul><li>xterm、Konsole、GNOME</li></ul></li></ul><h3 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h3><p>Linux内核博大精深，博主也没了解多少，只能指点有几个模块，有个概念</p><ul><li>系统内存管理</li><li>软件程序管理</li><li>硬件设备管理</li><li>文件系统管理</li></ul><h3 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h3><p>脚本区别与其他类编程语言就是不用经过编译（编译的功夫由底层编译器实现了），而是通过解释器，解释成另外的语句在底层编译器编译再在内核运行机器码</p><p>而Shell解释器也是同理<br>而Shell执行命令的流程是：识别命令，如果是内置命令（builtin）则直接执行，如果是非内置则fork子进程（可能有多级子程序），父程序等待子孙程序exec完成</p><p>当然其中肯定有很多语法分析的过程</p><h2 id="Linux命令-Shell程序"><a href="#Linux命令-Shell程序" class="headerlink" title="Linux命令/Shell程序"></a>Linux命令/Shell程序</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>当你登录shell，一般的linux系统默认启动bash shell<br>而顺带一提shell有几种启动方式</p><ol><li>登录时当做默认登录shell</li><li>作为非登录shell的交互式shell</li><li>作为运行脚本的非交互shell（后台模式运行）</li></ol><p>而第一种方式会从4个不同的启动文件读取命令：</p><ul><li>/etc/profile</li><li>$HOME/.bash_profile</li><li>$HOME/.bash_login</li><li>$HOME/.profile</li></ul><p>而第二种会去$HOME/.bashrc读取（其中又会去/etc/bashrc读取，实际上第一种方式里默认的脚本也会按这个链条去读取）</p><p>第三种就比较奇怪，而是会去读取BASH_ENV环境变量里的文件（我觉得也会去读取上面方式的脚本，但不知道怎么验证）</p><p>以上的$HOME是系统环境变量，Linux环境变量分为系统和用户，规范是系统大写、用户小写</p><p>从以上也能看出比较好设置自己的全局环境变量是在$HOME/.bashrc或者$HOME/.bash_profile里比较好</p><h3 id="运行-模块"><a href="#运行-模块" class="headerlink" title="运行/模块"></a>运行/模块</h3><h4 id="文件系统命令"><a href="#文件系统命令" class="headerlink" title="文件系统命令"></a>文件系统命令</h4><h5 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h5><p>我设想中的CI流程很多都是对文件的操作，所以这块是比较重要的</p><p>cd 命令我就不说了</p><p>列表功能，其中对文件的信息查看挺重要</p><p>ls在这块比较好用的选项是</p><table><thead><tr><th>ls -F</th><th>ls -R</th><th>ls -l</th><th>ls -a</th><th>ls -c</th><th>ls paramFile</th></tr></thead><tbody><tr><td>区分目录文件</td><td>递归输出目录下的目录文件</td><td>输出文件目录详细信息</td><td>输出包括隐藏文件</td><td>按最后一次修改时间排序</td><td>过滤输出的文件目录</td></tr></tbody></table><p>cp 复制命令</p><table><thead><tr><th>cp -b</th><th>cp -d</th><th>cp -f</th><th>cp -l</th><th>cp -p</th><th>cp -r</th><th>cp -R</th><th>cp -s</th></tr></thead><tbody><tr><td>备份</td><td>保留</td><td>覆盖</td><td>硬链接</td><td>尽力保留文件属性</td><td>递归复制文件</td><td>递归复制目录</td><td>软链接</td></tr></tbody></table><p>其中说明一下硬链接会保存源文件信息与备份，而软链接则只会保存信息</p><p>mv 重命名</p><p>rm 删除</p><table><thead><tr><th>rm -i</th><th>rm -f</th><th>rm -r</th><th>rm -rf</th></tr></thead><tbody><tr><td>删除文件</td><td>强制删除文件</td><td>强制删除目录</td><td>强制删除目录文件</td></tr></tbody></table><p>zip 打包</p><table><thead><tr><th>zip</th><th>zipcloak</th><th>zipnote</th><th>zipsplit</th><th>unzip</th></tr></thead><tbody><tr><td>打包</td><td>加密打包</td><td>备注</td><td>一分为多打包</td><td>解压</td></tr></tbody></table><p>umask</p><p>可以看当前目录/文件的安全权限八进制值，其中一般看目录的，文件一般跟随目录，可以通过umask置值</p><p>也可以通过chmod给文件、目录置八进制值，也可以通过chmod ugo +-rwx来赋值</p><p>命令的输入输出也可以通过一些重定向符号来做：<br>格式： command &gt; outputfile 或者command &gt;&gt; outputfile</p><p>因为根据设想中的流程发现很多都是以上的文件操作、权限赋予、输入输出重定向</p><h2 id="中断说明"><a href="#中断说明" class="headerlink" title="中断说明"></a>中断说明</h2><p>我重申一下：我更想的是给大家一个思考的过程和结果体会，也是我自己的总结</p><p>相比讲其他人已经定义好的是什么（除非是我定义的我才想写）</p><p>我更想讲为什么是这样，解决了什么问题、实现了什么需求、提升了什么、改变了什么</p><p>而具体又是因为什么才会是这样</p><p>我们还能根据既定规律（乃至创造规律）玩成：为什么可以是另外这样一种模样</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
